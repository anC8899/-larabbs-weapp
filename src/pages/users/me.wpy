<style lang="less">
.avatar-wrap {
  position: relative;
  margin-right: 10px;
}
.avatar {
  width: 50px;
  height: 50px;
  display: block;
  border-radius: 50%;
}
.logout {
  margin-top: 30px;
}
.introduction {
  font-size: 13px;
  color: #888888;
}
</style>
<template>
  <view class="page">
    <view class="page__bd" >
      <view class="weui-cells weui-cells_after-title">
        <!-- 已登录 -->
        <navigator class="weui-cell" wx:if="{{ user }}" url="/pages/users/edit">
          <view class="weui-cell__hd avatar-wrap">
            <image class="avatar" src="{{ user.avatar }}"/>
          </view>
          <view class="weui-cell__bd">
            <view>{{ user.name }}</view>
            <view class="page__desc">{{ user.introduction || '' }}</view>
          </view>
          <view class="weui-cell__ft weui-cell__ft_in-access"></view>
        </navigator>
        <!-- 未登录 -->
        <navigator class="weui-cell" wx:else url="/pages/auth/login">
          <view class="weui-cell__hd avatar-wrap">
              <image src="/images/user.png" class="avatar"/>
          </view>
          <view class="weui-cell__bd">
              <view>未登录</view>
          </view>
          <view class="weui-cell__ft weui-cell__ft_in-access"></view>
        </navigator>
        <navigator class="weui-cell weui-cell_access" url="">
          <view class="weui-cell__bd" url="">
            <view class="weui-cell__bd">我的消息</view>
          </view>
          <view class="weui-cell__ft weui-cell__ft_in-access"></view>
        </navigator>
        <navigator class="weui-cell weui-cell_access" url="">
          <view class="weui-cell__bd" url="">
            <view class="weui-cell__bd">我的话题</view>
          </view>
          <view class="weui-cell__ft weui-cell__ft_in-access"></view>
        </navigator>
        <navigator class="weui-cell weui-cell_access" url="">
          <view class="weui-cell__bd" url="">
            <view class="weui-cell__bd">我的回复</view>
          </view>
          <view class="weui-cell__ft weui-cell__ft_in-access"></view>
        </navigator>
      </view>
      <view class="page__bd page__bd_spacing logout">
        <button class="weui-btn" type="warn" wx:if="{{ user }}" @tap="logout">退出登录</button>
      </view>
      <view class="userinfo">
      <button wx:if="{{!hasUserInfo && canIUse}}" type="primary" open-type="getUserInfo" bindgetuserinfo="getUserInfo"> 获取头像昵称 </button>
      <block wx:else>
        <image bindtap="bindViewTap"  class="userinfo-avatar" src="{{userInfo.avatarUrl}}" background-size="cover"></image>
        <text class="userinfo-nickname">{{userInfo.nickName}}</text>
      </block>
    </view>
    </view>
  </view>
</template>

<script>
  import wepy from 'wepy'
  import 'wepy-async-function'
  import api from '@/utils/api'

  export default class UserMe extends wepy.page {
    config = {
      navigationBarTitleText: '我的'
    }
    data = {
      // 用户信息
      user: null,
      userInfo: {},
      hasUserInfo: false,
      canIUse: wepy.canIUse('button.open-type.getUserInfo')
    }
    async onShow() {
      // 每次打开页面，获取当前用户信息
      this.user = await this.$parent.getCurrentUser()
      this.$apply()
    }
    async onLoad() {
      // const codeRes = await wepy.login()
      // console.log(codeRes)
      // const userInfo = await wepy.getUserInfo()
      // console.log(userInfo)
    }

    async getUserInfo(e) {
      // const userInfoRes = await wepy.getUserInfo()
      // console.log(e.detail)
      let userSession = {}
      let userInfo = e.detail.userInfo
      const iv = e.detail.iv
      const encryptedData = e.detail.encryptedData
      const codeRes = await wepy.login()
      if (codeRes) {
        userSession = await api.request({
          url: 'weapp/userSession',
          method: 'POST',
          data: {'code': codeRes.code}
        })
        wepy.setStorageSync('user_session', userSession.data)
      }

      if (userSession.statusCode === 200) {
        const user = await api.request({
          url: 'weapp/userInfo',
          method: 'POST',
          data: {'session_key': userSession.data.session_key, 'iv': iv, 'encryptData': encryptedData}
        })
        userInfo = user.data
      }
      wepy.setStorageSync('user_info', userInfo)
      this.userInfo = userInfo
      this.hasUserInfo = true
      this.$apply()

      // console.log(e.detail)
    }
    methods = {
      // 退出登录方法
      async logout (e) {
        try {
          let logoutResponse = await api.logout()
          if (logoutResponse.statusCode === 204) {
            this.user = null
            this.$apply()
          }
        } catch (err) {
          console.log(err)
          wepy.showModal({
            title: '提示',
            content: '服务器错误，请联系管理员'
          })
        }
      }
    };
  }
</script>
